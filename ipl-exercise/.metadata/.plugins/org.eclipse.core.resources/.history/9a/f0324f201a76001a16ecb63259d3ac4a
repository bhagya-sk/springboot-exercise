package com.reactiveworks.ipl.controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.reactiveworks.ipl.controllers.exceptions.MatchResourceNotAvailableException;
import com.reactiveworks.ipl.model.Match;
import com.reactiveworks.ipl.service.IPLService;
import com.reactiveworks.ipl.service.exceptions.MatchNotFoundException;

/**
 * controller class for the match resource.
 */
@RestController
@RequestMapping("/matches")
public class MatchResourceController {

	private static final Logger LOGGER_OBJ = LoggerFactory.getLogger(MatchResourceController.class);

	@Autowired
	private IPLService iplService;

	/**
	 * finds the matches played in the given season.
	 * 
	 * @param season season for which matches are required.
	 * @return the list of matches played in the season
	 * @throws MatchResourceNotAvailableException when there are no matches in the
	 *                                            season
	 */
//	@GetMapping
//	public ResponseEntity<List<Match>> getMatches(@RequestParam int season) throws MatchResourceNotAvailableException {
//		LOGGER_OBJ.debug("execution of getMatch() started");
//		List<Match> matches;
//		try {
//			matches = iplService.getMatchDetails(season);
//		} catch (MatchNotFoundException e) {
//			LOGGER_OBJ.error("no matches were played in " + season);
//			throw new MatchResourceNotAvailableException("no matches were played in " + season);
//		}
//		LOGGER_OBJ.debug("execution of getMatch() completed");
//		return new ResponseEntity<List<Match>>(matches, HttpStatus.OK);
//	}

	/**
	 * gets all the matches from the database.
	 * 
	 * @return the list of matches from the database.
	 * @throws MatchResourceNotAvailableException when there are no matches in the
	 *                                            database.
	 */
	@GetMapping
	public ResponseEntity<List<Match>> getMatches(@RequestParam(defaultValue = "0") int season,
			@RequestParam(defaultValue = "0") int pageNo, @RequestParam(defaultValue = "5") int pageSize)
			throws MatchResourceNotAvailableException {
		LOGGER_OBJ.debug("execution of getMatches() started");
		List<Match> matches;
		try {
			if (season != 0) {
				matches = iplService.getMatchDetails(season);
			} else {
				matches = iplService.getAllMatchDetails(pageNo,pageSize);
			}

			System.out.println(season);
		} catch (MatchNotFoundException e) {
			LOGGER_OBJ.error("adffg");
			throw new MatchResourceNotAvailableException();
		}
		LOGGER_OBJ.debug("execution of getMatches() completed");
		return new ResponseEntity<List<Match>>(matches, HttpStatus.OK);
	}

	/**
	 * gets match with the given id from the database.
	 * 
	 * @param matchId id of the match to be fetched from the database.
	 * @return the match with the given id.
	 * @throws MatchResourceNotAvailableException when there are no matches in the
	 *                                            database.
	 */
	@GetMapping("/{matchId}")
	public ResponseEntity<Match> getMatch(@PathVariable int matchId) throws MatchResourceNotAvailableException {
		LOGGER_OBJ.debug("execution of getMatch() started");
		Match match;
		try {
			match = iplService.getMatchById(matchId);
		} catch (MatchNotFoundException e) {
			LOGGER_OBJ.error("");
			throw new MatchResourceNotAvailableException();
		}
		LOGGER_OBJ.debug("execution of getMatch() completed");
		return new ResponseEntity<Match>(match, HttpStatus.OK);

	}

}
