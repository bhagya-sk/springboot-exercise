package com.reactiveworks.ipl.controllers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.reactiveworks.ipl.model.Delivery;
import com.reactiveworks.ipl.service.IPLService;
import com.reactiveworks.ipl.service.exceptions.DeliveryNotFoundException;
import com.reactiveworks.ipl.service.exceptions.InsufficientInformationException;
import com.reactiveworks.ipl.service.exceptions.MatchNotFoundException;

/**
 * controller class for the match resource.
 */
@RestController
@RequestMapping("/deliveries")
public class DeliveryResourceController {

	private static Logger LOGGER_OBJ = LoggerFactory.getLogger(DeliveryResourceController.class);
	@Autowired
	private IPLService iplService;

	/**
	 * finds the winning team with the given information.
	 * 
	 * @param matchId     id of the match.
	 * @param inning1     inning in the match.
	 * @param battingTeam name of the team which is batting.
	 * @return the name of the winning team .
	 * @throws DeliveryNotFoundException when the delivery is not available.
	 * @throws MatchNotFoundException    when the match is not available.
	 * @throws InsufficientInformationException  when the sufficient information is not provided to find the winning team name.
	 */
	@GetMapping
	public ResponseEntity<String> getWinningTeamName(@RequestParam(defaultValue = "0") int matchId,
			@RequestParam(defaultValue = "0") int inning1, @RequestParam(defaultValue = "null") String battingTeam)
			throws DeliveryNotFoundException, MatchNotFoundException, InsufficientInformationException {
		LOGGER_OBJ.debug("execution of the getDeliveries() started");
		String winningTeamName = iplService.getWinningTeamName(matchId, inning1, battingTeam);
		LOGGER_OBJ.debug("execution of the getDeliveries() completed");
		return new ResponseEntity<String>(winningTeamName, HttpStatus.OK);
	}

	/**
	 * finds the delivery with the given id.
	 * 
	 * @param deliveryId id of the delivery to be fetched from the database.
	 * @return the dlivery with the given id.
	 * @throws DeliveryNotFoundException when the delivery with the given id is not
	 *                                   found.
	 */
	@GetMapping("/{deliveryId}")
	public ResponseEntity<Delivery> getDelivery(@PathVariable int deliveryId) throws DeliveryNotFoundException {
		LOGGER_OBJ.debug("execution of the getDelivery() started");
		Delivery delivery = iplService.getDeliveryById(deliveryId);
		LOGGER_OBJ.debug("execution of the getDelivery() completed");
		return new ResponseEntity<Delivery>(delivery, HttpStatus.OK);
	}

	/**
	 * inserts the delivery into the database.
	 * 
	 * @param delivery the delivery object to be inserted into the database.
	 * @return the link to the created resource.
	 * 
	 */
	@PostMapping
	public ResponseEntity<Link> insertDelivery(@RequestBody Delivery delivery) {
		LOGGER_OBJ.debug("execution of the insertDeliveries() started");
		iplService.addDelivery(delivery);
		int num;
		try {
			num = iplService.getDeliveries(0, 5).size();
			System.out.println(num);
		} catch (DeliveryNotFoundException e) {
			num = 0;
		}
		System.out.println(num);
		Link link = WebMvcLinkBuilder.linkTo(DeliveryResourceController.class).slash(++num).withSelfRel();
		LOGGER_OBJ.debug("execution of the insertDeliveries() completed");
		return new ResponseEntity<Link>(link, HttpStatus.CREATED);
	}

	/**
	 * updates the delivery.
	 * 
	 * @param deliveryId id of the delivery to be updated.
	 * @param delivery   the updated delivery.
	 * @return the status of the operation.
	 */
	@PutMapping("/{deliveryId}")
	public ResponseEntity<HttpStatus> updateDelivery(@PathVariable int deliveryId, @RequestBody Delivery delivery) {
		LOGGER_OBJ.debug("execution of the updateDelivery() started");
		iplService.updateDelivery(deliveryId, delivery);
		LOGGER_OBJ.debug("execution of the updateDelivery() completed");
		return new ResponseEntity<HttpStatus>(HttpStatus.OK);
	}

	/**
	 * deletes the delivery with the given id from the database.
	 * 
	 * @param deliveryId id of the delivery to be deleted from the database.
	 * @return the status of the operation.
	 * @throws DeliveryNotFoundException when delivery with the given id is not available.
	 */
	@DeleteMapping("/{deliveryId}")
	public ResponseEntity<HttpStatus> deleteDelivery(@PathVariable int deliveryId) throws DeliveryNotFoundException {
		LOGGER_OBJ.debug("execution of the deleteDelivery() started");
		iplService.deleteDelivery(deliveryId);
		LOGGER_OBJ.debug("execution of the deleteDelivery() completed");
		return new ResponseEntity<HttpStatus>(HttpStatus.OK);
	}

}
