package com.reactiveworks.ipl.controllers;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.reactiveworks.ipl.model.Delivery;
import com.reactiveworks.ipl.service.IPLService;

/**
 * controller class for the match resource.
 */
@RestController
@RequestMapping("/deliveries")
public class DeliveryResourceController {

	private static Logger LOGGER_OBJ = LoggerFactory.getLogger(DeliveryResourceController.class);
	@Autowired
	private IPLService iplService;

	@GetMapping
	public List<Delivery> getDeliveries(@RequestParam(defaultValue = "0") int matchId,
			@RequestParam(defaultValue = "0") int inning1, @RequestParam(defaultValue = "null") String battingTeam,
			@RequestParam(defaultValue = "0") int pageNo, @RequestParam(defaultValue = "0") int pageSize) {
		LOGGER_OBJ.debug("execution of the getDeliveries() started");
		List<Delivery> deliveries = new ArrayList<>();
		if (matchId != 0 && inning1 != 0 && battingTeam != null) {
			deliveries.add(iplService.getDelivery(matchId, inning1, battingTeam));
		} else if (matchId == 0 && inning1 == 0 && battingTeam == null) {
			deliveries = iplService.getDeliveries(pageNo,pageSize);
		} 
		LOGGER_OBJ.debug("execution of the getDeliveries() completed");
		return null;
	}
	
	@GetMapping("/{deliveryId}")
	public ResponseEntity<Delivery> getDelivery(@PathVariable int deliveryId){
		LOGGER_OBJ.debug("execution of the getDelivery() started");
		Delivery delivery=iplService.getDeliveryById(deliveryId);
		LOGGER_OBJ.debug("execution of the getDelivery() completed");
		return new ResponseEntity<Delivery>(delivery,HttpStatus.OK);
	}
	
	
	@PostMapping
	public ResponseEntity<Link> insertDelivery(@RequestBody Delivery delivery){
		LOGGER_OBJ.debug("execution of the insertDeliveries() started");
		iplService.addDelivery(delivery);
		//wrong
		Link link=WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(DeliveryResourceController.class).getDelivery(0)).withSelfRel();
		LOGGER_OBJ.debug("execution of the insertDeliveries() completed");
		return new ResponseEntity<Link>(link,HttpStatus.CREATED);
		//insert multiple deliveries
	}
	
	@PutMapping("/{deliveryId}")
	public ResponseEntity<HttpStatus> updateDelivery(@PathVariable int deliveryId,@RequestBody Delivery delivery){
		LOGGER_OBJ.debug("execution of the updateDelivery() started");
	    iplService.updateDelivery(deliveryId,delivery);
		LOGGER_OBJ.debug("execution of the updateDelivery() completed");
		return null;
	}

}
