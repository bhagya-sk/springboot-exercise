package com.reactiveworks.ipl.controllers;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.reactiveworks.ipl.controllers.exceptions.MatchResourceNotAvailableException;
import com.reactiveworks.ipl.model.Match;
import com.reactiveworks.ipl.service.IPLService;
import com.reactiveworks.ipl.service.exceptions.MatchNotFoundException;

/**
 * controller class for the match resource.
 */
@RestController
@RequestMapping("/matches")
public class MatchResourceController {

	private static final Logger LOGGER_OBJ = LoggerFactory.getLogger(MatchResourceController.class);

	@Autowired
	private IPLService iplService;

	/**
	 * gets either all the matches from the database or all the matches in the
	 * season.
	 * 
	 * @param season   the season from which matches are required.
	 * @param pageNo   number of the page to be displayed.
	 * @param pageSize number of matches to be displayed in one page.
	 * @return the list of matches from the database.
	 * @throws MatchNotFoundException when match record is not available.
	 */
	@GetMapping
	public ResponseEntity<List<Match>> getMatches(@RequestParam(defaultValue = "0") int season,
			@RequestParam(defaultValue = "0") int pageNo, @RequestParam(defaultValue = "5") int pageSize)
			throws MatchResourceNotAvailableException, MatchNotFoundException {
		LOGGER_OBJ.debug("execution of getMatches() started");
		List<Match> matches;

		if (season != 0) {
			matches = iplService.getMatchDetails(season);
		} else {
			matches = iplService.getAllMatchDetails(pageNo, pageSize);
		}

		LOGGER_OBJ.debug("execution of getMatches() completed");
		return new ResponseEntity<List<Match>>(matches, HttpStatus.OK);
	}

	/**
	 * gets match with the given id from the database.
	 * 
	 * @param matchId id of the match to be fetched from the database.
	 * @return the match with the given id.
	 * @throws MatchNotFoundException when match record is not available.
	 */
	@GetMapping("/{matchId}")
	public ResponseEntity<Match> getMatch(@PathVariable int matchId) throws MatchNotFoundException {
		LOGGER_OBJ.debug("execution of getMatch() started");

		Match match = iplService.getMatchById(matchId);

		LOGGER_OBJ.debug("execution of getMatch() completed");
		return new ResponseEntity<Match>(match, HttpStatus.OK);

	}

	/**
	 * inserts match details into the database.
	 * 
	 * @param match the match object to be inserted into the database.
	 * @return the link to the record created.
	 * @throws MatchNotFoundException
	 */
	@PostMapping
	public ResponseEntity<Link> insertMatch(@RequestBody Match match) throws MatchNotFoundException {
		LOGGER_OBJ.debug("execution of insertMatch() started");
		iplService.insertMatchDetails(match);
		Link link;

		link = WebMvcLinkBuilder
				.linkTo(WebMvcLinkBuilder.methodOn(MatchResourceController.class).getMatch(match.getMatchId()))
				.withSelfRel();

		link.withTitle("link to the created resource");
		LOGGER_OBJ.debug("execution of insertMatch() started");
		return new ResponseEntity<Link>(link, HttpStatus.CREATED);
	}

	@PutMapping("/{matchId}")
	public ResponseEntity<HttpStatus> updateMatchResource(@PathVariable int matchId, @RequestBody Match match) {
		LOGGER_OBJ.debug("execution of updateMatchResource() started");
		iplService.updateMatch(match);
		LOGGER_OBJ.debug("execution of updateMatchResource() started");
		return new ResponseEntity<HttpStatus>(HttpStatus.OK);
	}

	@DeleteMapping("/{matchId}")
	public ResponseEntity<HttpStatus> deleteMatch(@PathVariable int matchId) {
		LOGGER_OBJ.debug("execution of deleteMatch() started");
		try {
			iplService.deleteMatch(matchId);
		} catch (MatchNotFoundException e) {

		}
		LOGGER_OBJ.debug("execution of deleteMatch() started");
		return new ResponseEntity<HttpStatus>(HttpStatus.OK);
	}

}
